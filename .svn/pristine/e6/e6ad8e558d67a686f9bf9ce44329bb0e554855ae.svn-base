import json
import xmlrpc
from django.core import serializers
from django.core.urlresolvers import reverse
from django.http.response import JsonResponse, HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from django.views.defaults import page_not_found
from django.views.generic.base import View
from base.prodserv_forms import IngredientsForm, RecipesForm, ProdForm, CategoryForm, PositionForm, WorkerForm, \
    ServiceForm
from base.prodserv_models import Measure
from caterfull import settings

__author__ = 'maykel'

from base.prodserv_models import *

class MeasureList(View):
    def get(self, request, *args, **kwargs):
        data = Measure.objects.all().values()
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class IngredientsList(View):
    def get(self, request, *args, **kwargs):
        data = Ingredients.objects.all().values()
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class IngredientsAdd(View):
    form_class = IngredientsForm
    template_name = "base/products/ingredients_add.html"
    def get(self, request):
        return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        # data = (json.loads(request.body.decode()))
        form = self.form_class(self.request.POST)

        if form.is_valid():
            ing = Ingredients()
            ing.name = form.cleaned_data.get('name')
            ing.description = form.cleaned_data.get('description')
            ing.measure = form.cleaned_data.get('measure')
            ing.business = Business.objects.get_business_by_user(self.request.user)
            try:
                ing.save()
                return HttpResponseRedirect(reverse('ingredients'))
            except Exception as e:
                print(e)
                return HttpResponse(status=400)
        else:
            return JsonResponse({'errors': form.errors})

class IngredientsEdit(View):
    form_class = IngredientsForm
    template_name = "base/products/measure_add.html"
    def get(self, request, *args, **kwargs):
        id = kwargs.get('id')
        if id:
            ingredients = Ingredients.objects.filter(id=id).first()
            measures_list = Measure.objects.get_measures_of_magnitude(ingredients.measure.magnitude).values('id', 'name')
            dict_initial = {'name': ingredients.name, 'description': ingredients.description, 'current_measure':ingredients.measure, 'measures_list': measures_list}
            # print(dict_initial)
            if ingredients:
                form = self.form_class(initial={'name': ingredients.name, 'description': ingredients.description, 'measure':ingredients.measure})
                return render_to_response(self.template_name, RequestContext(request, {'form': form}))
            else:
                return page_not_found(request, 'Not Found', template_name='base/404.html')
        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')
    def post(self, request, *args, **kwargs):
        form = self.form_class(self.request.POST)
        id = kwargs.get('id')
        if id:
            ingredients = Ingredients.objects.filter(id=id).first()
            if form.is_valid():
                ingredients.name = form.cleaned_data.get('name')
                ingredients.description = form.cleaned_data.get('description')
                ingredients.measure = form.cleaned_data.get('measure')
                ingredients.business = Business.objects.get_business_by_user(user=self.request.user)
                try:
                    ingredients.save()
                    return HttpResponseRedirect(reverse('ingredients'))
                except:
                    return JsonResponse(form.errors, safe=False)
        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')

class IngredientsRemove(View):
      def get(self, request, *args, **kwargs):
          id = kwargs.get('id')
          if id:
              try:
                  Ingredients.objects.filter(id=id).delete()
                  return HttpResponseRedirect(reverse('ingredients'))
              except:
                  return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
          else:
              return page_not_found(request, 'Not Found', template_name='base/404.html')

class RecipeList(View):
    def get(self, request, *args, **kwargs):
        recipes = Recipe.objects.all()
        data = []
        items = []
        for recipe in recipes:
            data.append({'recipe': recipe.name})
            recing = RecipeIngredients.objects.filter(recipe=recipe)
            for item in recing:
                items.append({'ingredient': item.ingredient.name, 'measure': item.measure.name, 'cant': str(item.cant)})
            data.append({'items': items})

        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class RecipeAdd(View):
    form_class = RecipesForm
    template_name = "base/products/ingredients_add.html"
    def get(self, request):
        return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        #TODO:Validar los datos que me llegan
        data = {'name': 'paella marina', 'items': [{'igredient': 1, 'measure': 1, 'cant': 5}, {'igredient': 2, 'measure': 1, 'cant': 10}]}
        if data.get('name') != '' and len(data.get('items')) > 0:
            recipe = Recipe()
            recipe.name = data.get('name')
            recipe.business = Business.objects.get_business_by_user(self.request.user)
            try:
                recipe.save()
            except:
                return HttpResponse(status=400)

            for item in data.get('items'):
                recing = RecipeIngredients()
                recing.recipe = recipe
                recing.ingredient = Ingredients.objects.filter(id=item.get('igredient')).first()
                recing.measure = Measure.objects.filter(id=item.get('measure')).first()
                recing.cant = item.get('cant')
                try:
                    recing.save()
                except Exception as e:
                    return HttpResponse(status=500)
            return HttpResponseRedirect(reverse('recipe'))
        else:
            return HttpResponse(status=400)

        # form = self.form_class(self.request.POST)
        # if form.is_valid():
        #     try:
        #
        #         return HttpResponseRedirect(reverse('ingredients'))
        #     except Exception as e:
        #         return HttpResponse(status=400)
        # else:
        #     return JsonResponse({'errors': form.errors})

class RecipeEdit(View):
    def get(self, request, *args, **kwargs):
        id = kwargs.get('id')
        if id:
            recipes = Recipe.objects.filter(id=id).first()
            if recipes:
                data = []
                items = []
                data.append({'recipe': recipes.name})
                recing = RecipeIngredients.objects.filter(recipe=recipes)
                for item in recing:
                    items.append({'ingredient': item.ingredient.name, 'measure': item.measure.name, 'cant': str(item.cant)})
                data.append({'items': items})
                print(data)
                enco = json.JSONEncoder()
                return JsonResponse(enco.encode(list(data)), safe=False, status=200)
            else:
                return page_not_found(request, 'Not Found', template_name='base/404.html')
        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')

    def post(self, request, *args, **kwargs):
        id = kwargs.get('id')
        if id:
            Recipe.objects.filter(id=id).delete()
            data = {'name': 'pizza de cebolla', 'items': [{'igredient': 1, 'measure': 1, 'cant': 5}, {'igredient': 2, 'measure': 1, 'cant': 10}]}
            if data.get('name') != '' and len(data.get('items')) > 0:
                recipe = Recipe()
                recipe.name = data.get('name')
                recipe.business = Business.objects.get_business_by_user(self.request.user)
                try:
                    recipe.save()
                except:
                    return HttpResponse(status=400)

                for item in data.get('items'):
                    recing = RecipeIngredients()
                    recing.recipe = recipe
                    recing.ingredient = Ingredients.objects.filter(id=item.get('igredient')).first()
                    recing.measure = Measure.objects.filter(id=item.get('measure')).first()
                    recing.cant = item.get('cant')
                    try:
                        recing.save()
                    except Exception as e:
                        return HttpResponse(status=500)
                return HttpResponseRedirect(reverse('recipe'))
            else:
                return HttpResponse(status=400)

        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')

class RecipeRemove(View):
      def get(self, request, *args, **kwargs):
          id = kwargs.get('id')
          if id:
              try:
                  Recipe.objects.filter(id=id).delete()
                  return HttpResponseRedirect(reverse('recipe'))
              except:
                  return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
          else:
              return page_not_found(request, 'Not Found', template_name='base/404.html')

class CategoryList(View):
    def get(self, request, *args, **kwargs):
        categ = Category.objects.filter(business=Business.objects.get_business_by_user(self.request.user))
        data=[]
        for item in categ:
            data.append({'category': item.description})
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class CategoryAdd(View):
    form_class = CategoryForm
    template_name = "base/products/prod.html"
    def get(self, request, *args, **kwargs):
        return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        data = {'description': 'Paellas'}
        form = self.form_class(data.get('description'))
        if form.is_valid():
            categ = Category()
            categ.description = data.get('description')
            categ.business = Business.objects.get_business_by_user(self.request.user)
            try:
                categ.save()
                return HttpResponseRedirect(reverse('category'))
            except:
                return HttpResponse(status=400)
        else:
            enco = json.JSONEncoder()
            return JsonResponse(enco.encode(list(data)), safe=False, status=200)
class CategoryEdit(View):
    form_class = PositionForm
    template_name = "base/products/prod.html"
    def get(self, request, *args, **kwargs):
        id = self.kwargs['id']
        enco = json.JSONEncoder()
        if id:
            p = Category.objects.filter(id=id).first()
            if p:
                data = {'description': p.description}
                form = self.form_class(initial=data)
                return render_to_response(self.template_name, RequestContext(request, {'form': form}))
            # return JsonResponse(enco.encode(list(data)), safe=False, status=200)
            else:
                return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)
        else:
            return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)
    def post(self, request, *args, **kwargs):
        id = self.kwargs['id']
        enco = json.JSONEncoder()
        data = {'description': 'Postres'}
        if id:
            Category.objects.filter(id=id).first().delete()
            p = Category()
            p.description = data.get('description')
            p.business = Business.objects.get_business_by_user(self.request.user)
            try:
                p.save()
            except:
                return JsonResponse(enco.encode(list({'errors': 'Database error'})), safe=False, status=500)

            return JsonResponse(enco.encode(list(data)), safe=False, status=200)
        else:
            return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)

class CategoryRemove(View):
    def get(self, request, *args, **kwargs):
          id = kwargs.get('id')
          if id:
              try:
                  Category.objects.filter(id=id).delete()
                  return HttpResponseRedirect(reverse('category'))
              except:
                  return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
          else:
             return JsonResponse(safe=False, status=404)

class ProductList(View):
    def get(self, request, *args, **kwargs):
        products = Product.objects.filter(business=Business.objects.get_business_by_user(self.request.user))
        data = []
        items = []
        for product in products:
            data.append({'category': product.category.description, 'product': product.name, 'description': product.description, 'recipe': product.recipe.name})
            range = ProductPrice.objects.filter(product=product)
            for item in range:
                items.append({'min': item.min, 'max': item.max, 'price': str(item.price)})
            data.append({'items': items})

        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class ProductAdd(View):
    form_class = ProdForm
    template_name = "base/products/prod.html"
    def get(self, request):
        return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        #TODO:Validar los datos que me llegan
        data = {'name': 'Pizza Espirituana2', 'description': 'Paella Matancera a base de mariscos',
                'recipe': 'paella marina', 'category': 'Paellas',
                'items': [
                    {'min': 1, 'max': 10, 'price': 10},
                    {'min': 11, 'max': 20, 'price': 9},
                    {'min': 21, 'max': 0, 'price': 5}]}

        if data.get('name') != '' and len(data.get('items')) > 0:
            prod = Product()
            prod.name = data.get('name')
            prod.description = data.get('description')
            prod.category = Category.objects.filter(description=data.get('category')).first()
            prod.recipe = Recipe.objects.filter(name=data.get('recipe')).first()
            prod.business = Business.objects.get_business_by_user(self.request.user)
            try:
                prod.save()
            except:
                return HttpResponse(status=500)

            for item in data.get('items'):
                prodprice = ProductPrice()
                prodprice.min = item.get('min')
                prodprice.max = item.get('max')
                prodprice.price = item.get('price')
                prodprice.product = prod
                try:
                    prodprice.save()
                except Exception as e:
                    return HttpResponse(status=500)
            return HttpResponseRedirect(reverse('product'))
        else:
            return HttpResponse(status=400)

#TODO:Hacer el editar de los productos
class ProductEdit(View):
    form_class = ProdForm
    template_name = "base/products/prod.html"
    def get(self, request):
        return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        #TODO:Validar los datos que me llegan
        data = {'name': 'Pizza Espirituana2', 'description': 'Paella Matancera a base de mariscos',
                'recipe': 'paella marina', 'category': 'Paellas',
                'items': [
                    {'min': 1, 'max': 10, 'price': 10},
                    {'min': 11, 'max': 20, 'price': 9},
                    {'min': 21, 'max': 0, 'price': 5}]}

        if data.get('name') != '' and len(data.get('items')) > 0:
            prod = Product()
            prod.name = data.get('name')
            prod.description = data.get('description')
            prod.category = Category.objects.filter(description=data.get('category')).first()
            prod.recipe = Recipe.objects.filter(name=data.get('recipe')).first()
            prod.business = Business.objects.get_business_by_user(self.request.user)
            try:
                prod.save()
            except:
                return HttpResponse(status=500)

            for item in data.get('items'):
                prodprice = ProductPrice()
                prodprice.min = item.get('min')
                prodprice.max = item.get('max')
                prodprice.price = item.get('price')
                prodprice.product = prod
                try:
                    prodprice.save()
                except Exception as e:
                    return HttpResponse(status=500)
            return HttpResponseRedirect(reverse('product'))
        else:
            return HttpResponse(status=400)


class ProductRemove(View):
    def get(self, request, *args, **kwargs):
          id = kwargs.get('id')
          if id:
              try:
                  Product.objects.filter(id=id).delete()
                  return HttpResponseRedirect(reverse('product'))
              except:
                  return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
          else:
              return page_not_found(request, 'Not Found', template_name='base/404.html')


class PositionList(View):
    def get(self, request, *args, **kwargs):
        categ = Position.objects.filter(business=Business.objects.get_business_by_user(self.request.user))
        data=[]
        if categ:
            for item in categ:
                data.append({'position': item.description})
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)
class PositionAdd(View):
    form_class = PositionForm
    template_name = "base/products/prod.html"
    def get(self, request):
       return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        data = {'description': 'Mesero'}
        form = self.form_class(data)
        if form.is_valid():
            p = Position()
            p.description = data.get('description')
            p.business = Business.objects.get_business_by_user(self.request.user)
            try:
                p.save()
                return HttpResponseRedirect(reverse('position'))
            except:
                return HttpResponse(status=500)
        else:
            enco = json.JSONEncoder()
            return JsonResponse(enco.encode(list(form.errors)), safe=False, status=200)

class PositionEdit(View):
    form_class = PositionForm
    template_name = "base/products/prod.html"
    def get(self, request, *args, **kwargs):
        id = self.kwargs['id']
        enco = json.JSONEncoder()
        if id:
            p = Position.objects.filter(id=id).first()
            if p:
                data = {'description': p.description}
                form=self.form_class(initial=data)
                return render_to_response(self.template_name,RequestContext(request,{'form': form}))
            # return JsonResponse(enco.encode(list(data)), safe=False, status=200)
            else:
                return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)
        else:
            return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)
    def post(self, request, *args, **kwargs):
        id = self.kwargs['id']
        enco = json.JSONEncoder()
        data = {'description': 'Camarera'}
        if id:
            Position.objects.filter(id=id).first().delete()
            p = Position()
            p.description = data.get('description')
            p.business = Business.objects.get_business_by_user(self.request.user)
            try:
                p.save()
            except:
                return JsonResponse(enco.encode(list({'errors': 'Database error'})), safe=False, status=500)

            return JsonResponse(enco.encode(list(data)), safe=False, status=200)
        else:
            return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)

class PositionRemove(View):
    def get(self, request, *args, **kwargs):
          id = kwargs.get('id')
          if id:
              try:
                  Position.objects.filter(id=id).delete()
                  return HttpResponseRedirect(reverse('position'))
              except:
                  return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
          else:
             return JsonResponse(safe=False, status=404)

class WorkerList(View):
    def get(self, request, *args, **kwargs):
        w = Worker.objects.filter(business=Business.objects.get_business_by_user(self.request.user))
        data = []
        if w:
            for item in w:
                data.append({'name': item.name, 'last_name': item.last_name})
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class WorkerAdd(View):
    form_class = WorkerForm
    template_name = "base/products/prod.html"
    def get(self, request):
       return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        data = {'name': 'Amadito', 'last_name': 'sola','position': 'Dj'}
        form = self.form_class(data)
        if form.is_valid():
            w = Worker()
            w.name = data.get('name')
            w.last_name = data.get('last_name')
            w.position = Position.objects.filter(description=data.get('position')).first()
            w.business = Business.objects.get_business_by_user(self.request.user)
            try:
                w.save()
                return HttpResponseRedirect(reverse('worker'))
            except:
                return HttpResponse(status=500)
        else:
            enco = json.JSONEncoder()
            return JsonResponse(enco.encode(list(form.errors)), safe=False, status=200)
class WorkerEdit(View):
    form_class = WorkerForm
    template_name = "base/products/prod.html"
    def get(self, request, *args, **kwargs):
        id = self.kwargs['id']
        enco = json.JSONEncoder()
        if id:
            w = Worker.objects.filter(id=id).first()
            if w:
                data = {'name': w.name, 'last_name': w.last_name, 'position': w.position}
                form = self.form_class(initial=data)
                return render_to_response(self.template_name, RequestContext(request,{'form': form}))
            # return JsonResponse(enco.encode(list(data)), safe=False, status=200)
            else:
                return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)
        else:
            return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)
    def post(self, request, *args, **kwargs):
        id = self.kwargs['id']
        enco = json.JSONEncoder()
        data = {'name': 'Hector', 'last_name': 'Rodrigues', 'position': 'Chef'}
        if id:
            Worker.objects.filter(id=id).first().delete()
            p = Worker()
            p.name = data.get('name')
            p.last_name = data.get('last_name')
            p.position = Position.objects.filter(description=data.get('position')).first()
            p.business = Business.objects.get_business_by_user(self.request.user)
            try:
                p.save()
            except:
                return JsonResponse(enco.encode(list({'errors': 'Database error'})), safe=False, status=500)

            return JsonResponse(enco.encode(list(data)), safe=False, status=200)
        else:
            return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)
class WorkerRemove(View):
    def get(self, request, *args, **kwargs):
      id = kwargs.get('id')
      if id:
          try:
              Worker.objects.filter(id=id).delete()
              return HttpResponseRedirect(reverse('worker'))
          except:
              return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
      else:
         return JsonResponse(safe=False, status=404)

class ServicesList(View):
    def get(self, request, *args, **kwargs):
        w = Service.objects.filter(business=Business.objects.get_business_by_user(self.request.user))
        data = []
        if w:
            for item in w:
                data.append({'name': item.name, 'description': item.description, 'tarifa': item.tarifa_horaria })
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class ServicesAdd(View):
    form_class = ServiceForm
    template_name = "base/products/prod.html"
    def get(self, request):
       return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        data = {'name': 'Dj', 'descripion': 'El que pone la musica','tarifa_horaria': '50'}
        form = self.form_class(data)
        if form.is_valid():
            w = Service()
            w.name = data.get('name')
            w.description = data.get('description')
            w.tarifa_horaria = data.get('description')
            w.business = Business.objects.get_business_by_user(self.request.user)
            try:
                w.save()
                return HttpResponseRedirect(reverse('service'))
            except:
                return HttpResponse(status=500)
        else:
            enco = json.JSONEncoder()
            return JsonResponse(enco.encode(list(form.errors)), safe=False, status=200)

class ServicesEdit(View):
    form_class = ServiceForm
    template_name = "base/products/prod.html"
    def get(self, request, *args, **kwargs):
        id = self.kwargs['id']
        enco = json.JSONEncoder()
        if id:
            w = Service.objects.filter(id=id).first()
            if w:
                data = {'name': w.name, 'description': w.description, 'tarifa_horaria': w.tarifa_horaria}
                form = self.form_class(initial=data)
                return render_to_response(self.template_name, RequestContext(request, {'form': form}))
            # return JsonResponse(enco.encode(list(data)), safe=False, status=200)
            else:
                return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)
        else:
            return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)
    def post(self, request, *args, **kwargs):
        id = self.kwargs['id']
        enco = json.JSONEncoder()
        data = {'name': 'Bartender', 'description': 'El que prepara ls tragos en la barra', 'tarifa_horaria': '45'}
        if id:
            Service.objects.filter(id=id).first().delete()
            p = Service()
            p.name = data.get('name')
            p.description = data.get('description')
            p.tarifa_horaria = data.get('tarifa_horaria')
            p.business = Business.objects.get_business_by_user(self.request.user)
            try:
                p.save()
            except:
                return JsonResponse(enco.encode(list({'errors': 'Database error'})), safe=False, status=500)

            return JsonResponse(enco.encode(list(data)), safe=False, status=200)
        else:
            return JsonResponse(enco.encode(list({'errors': 'Page not Found'})), safe=False, status=404)

class ServicesRemove(View):
    def get(self, request, *args, **kwargs):
      id = kwargs.get('id')
      if id:
          try:
              Service.objects.filter(id=id).delete()
              return HttpResponseRedirect(reverse('service'))
          except:
              return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
      else:
         return JsonResponse(safe=False, status=404)

def get_list():
     data = list(Product.objects.all().values())
     enco = json.JSONEncoder()
     return enco.encode(data)

def ProductServiceList():
    from xmlrpc import server
    a = server.SimpleXMLRPCServer(settings.DEFAULT_SITE_DOMAIN, 8000)
    a.register_function(get_list())
    a.serve_forever()

    # def post(self, request, *args, **kwargs):
    #     data = (json.loads(request.body.decode()))
    #     form = TestForm(data)
    #     if form.is_valid():
    #         print(form.cleaned_data)
    #     else:
    #         print(form)
    #         print(form.errors)
    #         print(form.errors.as_json())
    #         print('meti la pata')
    #     # print(request.POST)
    #     # print(*args)
    #     # print(**kwargs)
    #     return HttpResponse()


# class MeT(View):
#
#     def get(self, request):
#         # return render_to_response('base/products/measure_list.html', RequestContext(request))