/**
 * Created by Hector on 12/01/2017.
 */
app.controller('ProposalsController', ['$scope', '$window', '$aside', 'PlaceholderTextService', '$alert', '$http', 'NomenclatorService', '$location', 'ProposalService', 'WizardHandler', 'CustomerService', 'ProductService', 'ServiceService', 'NotificationService', 'AlertConfirmService', function ($scope, $window, $aside, PlaceholderTextService, $alert, $http, NomenclatorService, $location, ProposalService, WizardHandler, CustomerService, ProductService, ServiceService, NotificationService, AlertConfirmService) {

    // settings
    $scope.settings = {
        singular: 'Presupuesto',
        plural: 'Presupuestos',
        cmd: 'New',
        //showAddItemForm: true,
        wizardEditMode: false

    };
    $scope.validation_errors = {};
    //page
    $scope.page = {
        title: 'Presupuestos',
        description: 'In most applications you need basic table listings and editing capabilities.' +
        ' With this app you can create simple admin functionality based on a json web service.',
        icon: 'md md-group'
    };

    // adding proposals data
    var data = [];
    ProposalService.getAll()
        .success(function (data, status, headers, config) {

            angular.forEach(data, function (item) {
                item.icon = ProposalService.createIcon(item.status);
            });
            $scope.data = data;
            $scope.testingItem = data[3];
            //console.log("controller - init");
            //console.log($scope.data);
        });


    //adding others stuffs
    //adding clients
    CustomerService.getAll()
        .success(function (data, status, headers, config) {
            angular.forEach(data, function (item) {
                item.icon = CustomerService.createIcon(item.new);
            });

            $scope.clients = data;
        });


    // defining template
    var formTpl = $aside({
        scope: $scope,
        templateUrl: '/static/assets/tpl/proposals/proposals-form.html',
        show: false,
        placement: 'left',
        backdrop: false,
        animation: 'am-slide-left'

    });


    // methods
    $scope.checkAll = function () {
        angular.forEach($scope.data, function (item) {
            item.selected = !item.selected;
        });
    };

    $scope.editItem = function (item) {
        if (item) {

            if (item.can_edit) {

                item.editing = true;
                $scope.item = item;
                //console.debug(item);
                $scope.item.event.event_time = item.event.event_date;
                $scope.item.address = item.event.address;
                $scope.settings.cmd = 'Edit';
                $scope.settings.wizardEditMode = true;


                resetAsideForm();


                showForm();

            } else {
                NotificationService.theme("", "El presupuesto seleccionado no se puede editar");
            }


        }
        console.log(item);
    };

    resetAsideForm = function () {
        $scope.proposalItemsSettings.showProposalItemForm = false;
        $scope.proposalItem = {};

        if ($scope.item.items.length > 0) {
            $scope.proposalItemsSettings.showAlertMessage = false;
        } else {
            $scope.proposalItemsSettings.showAlertMessage = true;

        }

    };

    $scope.viewItem = function (item) {
        if (item) {
            item.editing = false;
            $scope.item = item;
            $scope.item.event.event_time = item.event.event_date;
            $scope.settings.cmd = 'View';
            $scope.item.address = item.event.address;
            $scope.settings.wizardEditMode = true;

            resetAsideForm();

            showForm();
        }
    };

    $scope.createItem = function () {
        //resetAsideForm();

        var item = {
            editing: true,
            items: []
        }
        $scope.settings.cmd = 'New';
        $scope.item = item;

        $scope.settings.wizardEditMode = false;
        $scope.proposalItemsSettings.showAlertMessage = true;
        $scope.proposalItemsSettings.showProposalItemForm = false;
        //resetAsideForm();

        showForm();
    };

    $scope.saveItem = function (item) {
        //$scope.item.address = item.event.address;
        //console.log($scope.settings.cmd);
        //if ($scope.settings.cmd == 'Nuevo') {
        //$scope.data.push($scope.item);

        //   $scope.showAddItemForm = true;
        // }
        //console.debug(item);
        //hideForm();
        //console.log(item);
        WizardHandler.wizard().next();
        //$scope.newProposalItem(item);

    };

    $scope.remove = function (item) {

        var callbackFn = function () {
        };

        if (item) {
            var callbackFn = function () {

                ProposalService.delete(new Array(item))
                    .success(function () {
                        NotificationService.success('', 'Se ha eliminado el presupuesto seleccionado');
                        $scope.data.splice($scope.data.indexOf(item), 1);
                    }).error(function () {
                        NotificationService.error('Error', 'Ha existido un error al eliminar el presupuesto seleccionado');
                    });
            }
            AlertConfirmService.basicConfirm("Eliminar", "Confirma que desea eliminar el presupuesto seleccionado?", callbackFn);

        } else {

            callbackFn = function () {
                var seleccionados = $scope.data.filter(
                    function (item) {
                        return item.selected;
                    }
                );
                ProposalService.delete(seleccionados).success(function () {
                    NotificationService.success('', 'Se han eliminado los presupuestos seleccionados');

                    for (index in seleccionados) {
                        $scope.data.splice($scope.data.indexOf(seleccionados[index]), 1);
                    }
                }).error(function () {
                    NotificationService.error('Error', 'Ha existido un error al eliminar los presupuestos seleccionados');
                });
            }
            AlertConfirmService.basicConfirm("Eliminar", "Confirma que desea eliminar los presupuestos seleccionados?", callbackFn);
        }


    };

    showForm = function () {
        angular.element('.tooltip').remove();
        formTpl.show();
    };

    hideForm = function () {
        formTpl.hide();
    };

    $scope.$on('$destroy', function () {
        hideForm();

    });


    $scope.print = function () {
        return $window.print();
    }
    /*Items*/

    $scope.proposalItemsSettings = {
        showProposalItemForm: false,
        showAlertMessage: true
    }

    NomenclatorService.getAll('request').success(function (data) {
        $scope.itemTypes = data;
    });
    $scope.requestsByType = [];

    $scope.reloadRequests = function (proposalItem) {


        if (proposalItem.type !== undefined) {
            switch (proposalItem.type.id) {
                case 1:
                    ProductService.getAll().success(function (datos) {
                        $scope.requestsByType = datos;
                    })

                    break;
                case 2:
                    ServiceService.getAll().success(function (data) {
                        $scope.requestsByType = data;
                    })

                    break;
            }

        }
    };


    $scope.newProposalItem = function () {
        proposalItem = {
            model: "proposal",
            editing: true,
            quantity: 0,
            unit_cost: 0,
            tax: 7,
            discount: 0,
            cmd: 'New',
            itemValues: {
                subtotal: 0,
                taxes: 0,
                total: 0,
                discount: 0,
                grandTotal: 0
            }

        };

        $scope.proposalItem = proposalItem;

        $scope.proposalItemsSettings.showAlertMessage = false;
        $scope.proposalItemsSettings.showProposalItemForm = true;

    }

    $scope.saveProposalItem = function (item, proposalItem) {

        var elems = $scope.requestsByType.filter(function (elem) {
            return (elem.id == proposalItem.request.id);
        })

        //console.debug(proposalItem);

        proposalItem.requestName = elems[0].name

        //console.log(proposalItem.requestName);

        if (proposalItem.cmd == 'New') {
            item.items.push(proposalItem);
            NotificationService.success("Se ha adicionado el item satisfactoriamente");

            if ($scope.onlyAdd) {
                $scope.proposalItemsSettings.showProposalItemForm = false;
            } else {
                proposalItem = {};
                $scope.newProposalItem(item);
                $scope.proposalItemsSettings.showProposalItemForm = true;
            }
        } else if (proposalItem.cmd == 'Edit') {
            NotificationService.success("Se ha actualizado el item satisfactoriamente");
            $scope.proposalItemsSettings.showProposalItemForm = false;
        }

        $($("#proposalItemForm").ajaxForm()).resetForm();
        console.log(proposalItem);

    }
    $scope.onlyAdd = true

    $scope.saveAndAddProposalItem = function () {
        $scope.onlyAdd = false;

    }
    $scope.onlySave = function () {
        $scope.onlyAdd = true;
    }

    $scope.cancelProposalItem = function () {
        $scope.proposalItemsSettings.showProposalItemForm = false;
        if ($scope.item.items.length == 0) {
            $scope.proposalItemsSettings.showAlertMessage = true;
        }
    }
    $scope.viewProposalItem = function (proposalItem) {
        proposalItem.cmd = 'View';
        proposalItem.itemValues = {
            subtotal: 0,
            taxes: 0,
            total: 0,
            discount: 0,
            grandTotal: 0
        }

        proposalItem.editing = false;
        proposalItem.model = "proposal";
        $scope.proposalItem = proposalItem;
        $scope.calculateValues(proposalItem);
        $scope.proposalItemsSettings.showProposalItemForm = true;

    }
    $scope.editProposalItem = function (proposalItem) {
        proposalItem.model = "proposal";
        proposalItem.editing = true;
        proposalItem.cmd = 'Edit';
        proposalItem.itemValues = {
            subtotal: 0,
            taxes: 0,
            total: 0,
            discount: 0,
            grandTotal: 0
        }

        $scope.reloadRequests(proposalItem);

        switch (proposalItem.type.id) {
            case 1:
                proposalItem.request = proposalItem.product;
                break;
            case 2:
                proposalItem.request = proposalItem.service;
                break;
        }

        $scope.proposalItem = proposalItem;
        $scope.proposalItemsSettings.showProposalItemForm = true;
        $scope.calculateValues(proposalItem);


    }
    $scope.removeProposalItem = function (proposalItem) {


        var callbackFn = function () {

            $scope.item.items.splice($scope.item.items.indexOf(proposalItem), 1);
            $scope.cancelProposalItem();

            NotificationService.success('', 'Se ha eliminado el elemento seleccionado');

        };

        AlertConfirmService.basicConfirm("Eliminar", "Confirma que desea eliminar el elemento seleccionado?", callbackFn);

    }

    var previewTemplatePage = $aside({
        scope: $scope,
        templateUrl: '/static/assets/tpl/proposals/proposal-preview.html',
        show: false,
        placement: 'left',
        backdrop: false,
        animation: 'am-slide-left'
    });

    showPreview = function () {
        angular.element('.tooltip').remove();
        previewTemplatePage.show();
    };

    $scope.showPreviewTemplate = function(item){
        $scope.item = item;
        showPreview();
    }

    //asideShow1 = function (item) {
    //    $scope.item = item;
    //    previewTemplatePage.show();
    //}
    //
    //$scope.asideShow = asideShow1();

    $scope.finish = function (item) {

        item.finish = true;

        switch ($scope.settings.cmd) {
            case "New":
                ProposalService.add(item).success(function (data) {
                    NotificationService.success("Se ha adicionado el proposal");
                    $scope.data.push(item);
                }).error(function () {
                    NotificationService.error("Ha existido un error al adicionar el proposal");
                });
                break;
            case "Edit":
                ProposalService.edit(item.id, item).success(function (data) {
                    NotificationService.success("Se ha actualizado el presupuesto satisfactoriamente");
                    $scope.data[$scope.data.indexOf(item)] = item;
                    //$scope.item.items.splice($scope.item.items.indexOf(proposalItem), 1);
                }).error(function () {
                    NotificationService.error("Ha existido un error al actualizar el presupuesto");
                });
                break;

        }


        if (item.showPreview !== undefined && item.showPreview) {

            hideForm();
            //asideShow1(item).show();


        } else {
            hideForm();
        }
        console.log(item);


    }


    var totalItemsValues = {
        subtotal: 0,
        taxes: 0,
        total: 0,
        discount: 0,
        grandTotal: 0
    };


    $scope.calculateValues = function (proposalItem) {

        /*Subtotal*/
        if (proposalItem.quantity !== undefined && proposalItem.unit_cost !== undefined) {
            proposalItem.itemValues.subtotal = proposalItem.quantity * proposalItem.unit_cost;
        }

        if (proposalItem.tax !== undefined) {
            if (proposalItem.itemValues.subtotal > 0 && proposalItem.tax > 0) {
                proposalItem.itemValues.taxes = proposalItem.itemValues.subtotal * proposalItem.tax / 100;
            } else {
                proposalItem.itemValues.taxes = 0;
            }
        }

        if (proposalItem.discount !== undefined) {
            if (proposalItem.discount > 0) {
                proposalItem.itemValues.discount = proposalItem.itemValues.total * proposalItem.discount / 100;
            } else {
                proposalItem.itemValues.discount = 0;
            }
        }

        proposalItem.itemValues.total = proposalItem.itemValues.subtotal + proposalItem.itemValues.taxes;
        proposalItem.itemValues.grandTotal = proposalItem.itemValues.total - proposalItem.itemValues.discount;

    }


}]);
