from datetime import datetime
from re import match

from django import forms
from django.forms.models import ModelForm
from django.forms.widgets import Textarea

from base.models import Customer, N_State, N_Country


class CustomerForm(ModelForm):

    first_name = forms.CharField(max_length=50)
    last_name = forms.CharField(max_length=50)
    email = forms.EmailField()
    comments = forms.CharField(max_length=250, widget=Textarea, required=False)
    company = forms.CharField(max_length=50, required=False)
    birthday = forms.DateField(required=False, label='Fecha de nacimiento')
    cellphone = forms.CharField(required=False, max_length=25, label='Telefono movil')
    phone_home = forms.CharField(required=False, max_length=25, label='Telefono casa')
    first_line = forms.CharField(max_length=150)
    second_line = forms.CharField(max_length=150, required=False)
    zip = forms.IntegerField(min_value=40)
    city = forms.CharField()
    state = forms.ModelChoiceField(queryset=N_State.objects.all())


    # address = forms.CharField(required=False, max_length=250, widget=Textarea,label='Direcci√≥n')

    class Meta:
        model = Customer
        fields = ['suffix','prefix']

    def clean_cellphone(self):
        value = self.data['cellphone']
        if value:
            flag =  match(r'^[+]{0,1}\d+$',value)
            if flag:
                return value
            else:
                raise forms.ValidationError('Numero de telefono invalido')
        return value

    def clean_phone_home(self):
        value = self.data['phone_home']
        if value:
            flag =  match(r'^[+]{0,1}\d+$',value)
            if flag:
                return value
            else:
                raise forms.ValidationError('Numero de telefono invalido')
        return value


class EventForm(forms.Form):

    name = forms.CharField(max_length=100)
    event_date = forms.DateTimeField()
    comment = forms.CharField(widget=forms.Textarea(), max_length=150, required=False)
    first_line = forms.CharField(max_length=150)
    second_line = forms.CharField(max_length=150, required=False)
    zip = forms.IntegerField(min_value=40)
    city = forms.CharField()
    state = forms.ModelChoiceField(queryset=N_State.objects.all())
    customer = forms.ModelChoiceField(queryset=Customer.objects.all())


    def clean_evento_date(self):
        if self.fields['event_date'].to_python((self.data['event_date'])).date() < datetime.today().date():
            raise forms.ValidationError('La fecha del evento debe ser posterior al fecha actual')
        return  self.data['event_date']

class BusinessProfileForm(forms.Form):

    phone = forms.CharField(max_length=20, error_messages={'required':'Campo Requerido'})
    name = forms.CharField(max_length=250)
    first_name = forms.CharField(max_length=25)
    last_name = forms.CharField(max_length=25)
    email = forms.EmailField()
    address = forms.CharField(max_length=250, widget=forms.Textarea())
    tax = forms.DecimalField(max_digits=4, decimal_places=2, min_value=0)
    logo = forms.FileField(required=False)
    websiteurl = forms.URLField(required=False)
    default_site = forms.BooleanField(required=False)

    first_line = forms.CharField(max_length=150, widget=forms.TextInput(attrs={'placeholder':"First Line"}))
    second_line = forms.CharField(max_length=150, required=False, widget=forms.TextInput(attrs={'placeholder':"Second Line"}))
    zip = forms.IntegerField(min_value=40,widget=forms.TextInput(attrs={'placeholder':"Codigo Postal"}))
    city = forms.CharField(widget=forms.TextInput(attrs={'placeholder':"Ciudad"}))
    state = forms.ModelChoiceField(queryset=N_State.objects.all())
    country = forms.ModelChoiceField(queryset=N_Country.objects.all(),empty_label='--Seleccione un pais--')