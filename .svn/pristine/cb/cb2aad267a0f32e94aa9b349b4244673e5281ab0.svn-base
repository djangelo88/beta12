import json
from django.core import serializers
from django.core.urlresolvers import reverse
from django.http.response import JsonResponse, HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from django.views.defaults import page_not_found
from django.views.generic.base import View
from base.prodserv_forms import IngredientsForm, RecipesForm
from base.prodserv_models import Measure

__author__ = 'maykel'

from base.prodserv_models import *

class MeasureList(View):
    def get(self, request, *args, **kwargs):
        data = Measure.objects.all().values()
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class IngredientsList(View):
    def get(self, request, *args, **kwargs):
        data = Ingredients.objects.all().values()
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class IngredientsAdd(View):
    form_class = IngredientsForm
    template_name = "base/products/ingredients_add.html"
    def get(self, request):
        return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        form = self.form_class(self.request.POST)
        if form.is_valid():
            ing = Ingredients()
            ing.name = form.cleaned_data.get('name')
            ing.description = form.cleaned_data.get('description')
            ing.business = Business.objects.get_business_by_user(self.request.user)
            try:
                form.save()
                return HttpResponseRedirect(reverse('ingredients'))
            except Exception as e:
                return HttpResponse(status=400)
        else:
            return JsonResponse({'errors': form.errors})

class IngredientsEdit(View):
    form_class = IngredientsForm
    template_name = "base/products/measure_add.html"
    def get(self, request, *args, **kwargs):
        id = kwargs.get('id')
        if id:
            ingredients = Ingredients.objects.filter(id=id).first()
            if ingredients:
                form = self.form_class(initial={'name': ingredients.name, 'description': ingredients.description})
                return render_to_response(self.template_name, RequestContext(request, {'form': form}))
            else:
                return page_not_found(request, 'Not Found', template_name='base/404.html')
        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')
    def post(self, request, *args, **kwargs):
        form = self.form_class(self.request.POST)
        id = kwargs.get('id')
        if id:
            ingredients = Ingredients.objects.filter(id=id).first()
            if form.is_valid():
                ingredients.name = form.cleaned_data.get('name')
                ingredients.description = form.cleaned_data.get('description')
                ingredients.business = Business.objects.get_business_by_user(user=self.request.user)
                try:
                    ingredients.save()
                    return HttpResponseRedirect(reverse('ingredients'))
                except:
                    return JsonResponse(form.errors, safe=False)
        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')

class IngredientsRemove(View):
      def get(self, request, *args, **kwargs):
          id = kwargs.get('id')
          if id:
              try:
                  Ingredients.objects.filter(id=id).delete()
                  return HttpResponseRedirect(reverse('ingredients'))
              except:
                  return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
          else:
              return page_not_found(request, 'Not Found', template_name='base/404.html')

class RecipeList(View):
    def get(self, request, *args, **kwargs):
        data = Recipe.objects.all().values()
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)
#
# class RecipeAdd(View):
#     form_class = RecipesForm
#     template_name = "base/products/ingredients_add.html"
#     def get(self, request):
#         return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
#     def post(self, request, *args, **kwargs):
#         form = self.form_class(self.request.POST)
#         if form.is_valid():
#             try:
#                 form.save()
#                 return HttpResponseRedirect(reverse('ingredients'))
#             except Exception as e:
#                 return HttpResponse(status=400)
#         else:
#             return JsonResponse({'errors': form.errors})
#


# class MeT(View):
#
#     def get(self, request):
#         # return render_to_response('base/products/measure_list.html', RequestContext(request))