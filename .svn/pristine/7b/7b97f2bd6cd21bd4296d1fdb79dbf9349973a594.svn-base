from datetime import timedelta
from django.db.models.aggregates import Count
from django.db.models.fields import DateTimeField
from django.http.response import HttpResponse, JsonResponse
from django.views.generic.base import View
from base.api.util import serialize_query
from base.model_invoice import Invoice, Proposal
from base.models import Business
from django.utils import formats

import json
from base.util import check_permission


class InvoiceView(View):

    def get(self, request, *args, **kwargs):
        user = request.user
        business = Business.objects.filter(owner=user).first()

        if kwargs.get('id'):
            id = kwargs.get('id')

            inv = Invoice.objects.get_by_id(id=id, business=business)

            if inv in Invoice.objects.ERRORS:
                return HttpResponse(status=404)
            data = inv.proposal.serialize()
        else:
            proposal = Proposal.objects.annotate(ni=Count('invoice')).filter(ni=1)

            data = serialize_query(proposal)

        return JsonResponse(safe=False, data=data)

    def prepre_data(self, data):
        result = {}
        evento = data.get('event')
        address = evento.get('address')
        customer = evento.get('customer')
        event_data = {}
        event_data['name'] = evento.get('name')
        event_data['customer'] = customer.get('id')
        event_data['comments'] = data.get('comments')
        event_data['first_line'] = address.get('first_line')
        event_data['second_line'] = address.get('second_line')
        event_data['zip'] = address.get('zip')
        event_data['city'] = address.get('city')
        event_data['city'] = address.get('city')
        event_data['state'] = address.get('state').get('id')
        # print(evento.get('event_date'))
        event_date = DateTimeField().to_python(evento.get('event_date')).date()
        event_date = DateTimeField().to_python(event_date.isoformat())
        event_time = DateTimeField().to_python(evento.get('event_time'))
        delta = timedelta(hours=event_time.hour, minutes=event_time.minute)
        print(event_date)
        event_date = event_date + delta
        event_data['event_date'] = formats.date_format(event_date, 'Y-m-d H:m')
        result['event_data'] = event_data
        result['address'] = address
        return result

    def post(self, request, *args, **kwargs):
        data = json.loads(request.body.decode())
        print(data)
        return HttpResponse()

class InvoiceDeleteView(View):

    def post(self, request, *args, **kwargs):
        if not check_permission(request=request, permission='delete_invoice'):
           return HttpResponse(status=401)
        user = request.user
        business = Business.objects.filter(owner=user).first()

        data = json.loads(request.body.decode())

        ids = [inv.get('id') for inv in data]
        try:
            deleted = Invoice.objects.bulk_delete(ids_list=ids, business=business)
            return JsonResponse(status=200, data={'deleted':deleted})
        except Exception as e:
            print(e)
            return HttpResponse(status=400)