import json
from django.core import serializers
from django.core.urlresolvers import reverse
from django.http.response import JsonResponse, HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from django.views.defaults import page_not_found
from django.views.generic.base import View
from base.prodserv_forms import IngredientsForm, RecipesForm
from base.prodserv_models import Measure

__author__ = 'maykel'

from base.prodserv_models import *

class MeasureList(View):
    def get(self, request, *args, **kwargs):
        data = Measure.objects.all().values()
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class IngredientsList(View):
    def get(self, request, *args, **kwargs):
        data = Ingredients.objects.all().values()
        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class IngredientsAdd(View):
    form_class = IngredientsForm
    template_name = "base/products/ingredients_add.html"
    def get(self, request):
        return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        # data = (json.loads(request.body.decode()))
        form = self.form_class(self.request.POST)

        if form.is_valid():
            ing = Ingredients()
            ing.name = form.cleaned_data.get('name')
            ing.description = form.cleaned_data.get('description')
            ing.measure = form.cleaned_data.get('measure')
            ing.business = Business.objects.get_business_by_user(self.request.user)
            try:
                ing.save()
                return HttpResponseRedirect(reverse('ingredients'))
            except Exception as e:
                print(e)
                return HttpResponse(status=400)
        else:
            return JsonResponse({'errors': form.errors})

class IngredientsEdit(View):
    form_class = IngredientsForm
    template_name = "base/products/measure_add.html"
    def get(self, request, *args, **kwargs):
        id = kwargs.get('id')
        if id:
            ingredients = Ingredients.objects.filter(id=id).first()
            measures_list = Measure.objects.get_measures_of_magnitude(ingredients.measure.magnitude).values('id', 'name')
            dict_initial = {'name': ingredients.name, 'description': ingredients.description, 'current_measure':ingredients.measure, 'measures_list': measures_list}
            # print(dict_initial)
            if ingredients:
                form = self.form_class(initial={'name': ingredients.name, 'description': ingredients.description, 'measure':ingredients.measure})
                return render_to_response(self.template_name, RequestContext(request, {'form': form}))
            else:
                return page_not_found(request, 'Not Found', template_name='base/404.html')
        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')
    def post(self, request, *args, **kwargs):
        form = self.form_class(self.request.POST)
        id = kwargs.get('id')
        if id:
            ingredients = Ingredients.objects.filter(id=id).first()
            if form.is_valid():
                ingredients.name = form.cleaned_data.get('name')
                ingredients.description = form.cleaned_data.get('description')
                ingredients.measure = form.cleaned_data.get('measure')
                ingredients.business = Business.objects.get_business_by_user(user=self.request.user)
                try:
                    ingredients.save()
                    return HttpResponseRedirect(reverse('ingredients'))
                except:
                    return JsonResponse(form.errors, safe=False)
        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')

class IngredientsRemove(View):
      def get(self, request, *args, **kwargs):
          id = kwargs.get('id')
          if id:
              try:
                  Ingredients.objects.filter(id=id).delete()
                  return HttpResponseRedirect(reverse('ingredients'))
              except:
                  return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
          else:
              return page_not_found(request, 'Not Found', template_name='base/404.html')

class RecipeList(View):
    def get(self, request, *args, **kwargs):
        recipes = Recipe.objects.all()
        data = []
        items = []
        for recipe in recipes:
            data.append({'recipe': recipe.name})
            recing = RecipeIngredients.objects.filter(recipe=recipe)
            for item in recing:
                items.append({'ingredient': item.ingredient.name, 'measure': item.measure.name, 'cant': str(item.cant)})
            data.append({'items': items})

        enco = json.JSONEncoder()
        return JsonResponse(enco.encode(list(data)), safe=False, status=200)

class RecipeAdd(View):
    form_class = RecipesForm
    template_name = "base/products/ingredients_add.html"
    def get(self, request):
        return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        #TODO:Validar los datos que me llegan
        data = {'name': 'pizza de cebolla', 'items': [{'igredient': 1, 'measure': 1, 'cant': 5}, {'igredient': 2, 'measure': 1, 'cant': 10}]}
        if data.get('name') != '' and len(data.get('items')) > 0:
            recipe = Recipe()
            recipe.name = data.get('name')
            recipe.business = Business.objects.get_business_by_user(self.request.user)
            try:
                recipe.save()
            except:
                return HttpResponse(status=400)

            for item in data.get('items'):
                recing = RecipeIngredients()
                recing.recipe = recipe
                recing.ingredient = Ingredients.objects.filter(id=item.get('igredient')).first()
                recing.measure = Measure.objects.filter(id=item.get('measure')).first()
                recing.cant = item.get('cant')
                try:
                    recing.save()
                except Exception as e:
                    return HttpResponse(status=500)
            return HttpResponseRedirect(reverse('recipe'))
        else:
            return HttpResponse(status=400)

        # form = self.form_class(self.request.POST)
        # if form.is_valid():
        #     try:
        #
        #         return HttpResponseRedirect(reverse('ingredients'))
        #     except Exception as e:
        #         return HttpResponse(status=400)
        # else:
        #     return JsonResponse({'errors': form.errors})

class RecipeEdit(View):
    def get(self, request, *args, **kwargs):
        id = kwargs.get('id')
        if id:
            recipes = Recipe.objects.filter(id=id).first()
            if recipes:
                data = []
                items = []
                data.append({'recipe': recipes.name})
                recing = RecipeIngredients.objects.filter(recipe=recipes)
                for item in recing:
                    items.append({'ingredient': item.ingredient.name, 'measure': item.measure.name, 'cant': str(item.cant)})
                data.append({'items': items})
                print(data)
                enco = json.JSONEncoder()
                return JsonResponse(enco.encode(list(data)), safe=False, status=200)
            else:
                return page_not_found(request, 'Not Found', template_name='base/404.html')
        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')

    def post(self, request, *args, **kwargs):
        id = kwargs.get('id')
        if id:
            Recipe.objects.filter(id=id).delete()
            data = {'name': 'pizza de cebolla', 'items': [{'igredient': 1, 'measure': 1, 'cant': 5}, {'igredient': 2, 'measure': 1, 'cant': 10}]}
            if data.get('name') != '' and len(data.get('items')) > 0:
                recipe = Recipe()
                recipe.name = data.get('name')
                recipe.business = Business.objects.get_business_by_user(self.request.user)
                try:
                    recipe.save()
                except:
                    return HttpResponse(status=400)

                for item in data.get('items'):
                    recing = RecipeIngredients()
                    recing.recipe = recipe
                    recing.ingredient = Ingredients.objects.filter(id=item.get('igredient')).first()
                    recing.measure = Measure.objects.filter(id=item.get('measure')).first()
                    recing.cant = item.get('cant')
                    try:
                        recing.save()
                    except Exception as e:
                        return HttpResponse(status=500)
                return HttpResponseRedirect(reverse('recipe'))
            else:
                return HttpResponse(status=400)

        else:
            return page_not_found(request, 'Not Found', template_name='base/404.html')

class RecipeRemove(View):
      def get(self, request, *args, **kwargs):
          id = kwargs.get('id')
          if id:
              try:
                  Recipe.objects.filter(id=id).delete()
                  return HttpResponseRedirect(reverse('recipe'))
              except:
                  return JsonResponse({'errors': 'Error al eliminar'}, safe=False, status=400)
          else:
              return page_not_found(request, 'Not Found', template_name='base/404.html')



    # def post(self, request, *args, **kwargs):
    #     data = (json.loads(request.body.decode()))
    #     form = TestForm(data)
    #     if form.is_valid():
    #         print(form.cleaned_data)
    #     else:
    #         print(form)
    #         print(form.errors)
    #         print(form.errors.as_json())
    #         print('meti la pata')
    #     # print(request.POST)
    #     # print(*args)
    #     # print(**kwargs)
    #     return HttpResponse()


# class MeT(View):
#
#     def get(self, request):
#         # return render_to_response('base/products/measure_list.html', RequestContext(request))