import json

from django.core.urlresolvers import reverse
from django.http.response import HttpResponseRedirect, JsonResponse
from django.shortcuts import render_to_response
from django.http import HttpResponse

# Create your views here.
from django.template.context import RequestContext
from django.views.generic.base import View
import django_excel
import pyexcel
from base.api.forms import CustomerForm
from base.api.util import serialize_query
from base.forms import EventForm, CustomerImportForm, TestForm
from base.models import Business, Customer, N_State
from base.util import check_permission
from django.db.models import DateTimeField
from django.utils import formats

class CustomerView(View):


    def get(self, request, *args, **kwargs):
        user = request.user
        business = Business.objects.filter(owner=user).first()

        customers = Customer.objects.list_by_business(business=business)
        id = kwargs.get('id')
        if id :
            custome = Customer.objects.get_one_by_business_and_id(business=business, id=id)
            data = custome.serialize()
        else:
            data = serialize_query(customers)

        return JsonResponse(data=data, safe=False)


    def post(self, request, *args, **kwargs):
        user = request.user
        business = Business.objects.filter(owner=user).first()
        customer = None
        id = kwargs.get('id')
        if id:
            customer = Customer.objects.get_one_by_business_and_id(business=business, id=id)
        # print(request.body)
        if not check_permission(request=request, permission='add_customer'):
           return HttpResponse(status=401)
        print(request.body)
        data = json.loads(request.body.decode())
        print(data.get('birthday'))

        if data.get('birthday'):
            dt_value = DateTimeField().to_python(data.get('birthday'))
            dd_value = dt_value.date()
            dd_formatted = formats.date_format(dd_value, 'Y-m-d')
            data['birthday'] = dd_formatted

        if data.get('prefix'):
            data['prefix'] = data.get('prefix').get('id')
        if data.get('suffix'):
            data['suffix'] = data.get('suffix').get('id')
        # return HttpResponse()
        # state = N_State.objects.filter(id=data.get('state')).first()
        # if not state:
        #     return JsonResponse(status=400, data=[{'state':[{'messasge':'Campo requerido'}]}], safe=False)
        form = CustomerForm(data)

        if form.is_valid():
            print(form.cleaned_data)
            response = Customer.objects.create_or_update_customer(form.cleaned_data, business=business, customer=customer)
            if response in Customer.objects.ERRORS:
                if response == Customer.objects.EMAIL_ERROR:
                    return JsonResponse(status=400, data=[{'state':[{'messasge':'Correo Repetido'}]}], safe=False)
                return JsonResponse(status=400, data=[{'state':[{'messasge':'Error al procesar los datos'}]}], safe=False)
            return HttpResponse(status=201)
        else:
            return JsonResponse(form.errors.as_json(),status=400, safe=False)

class CustomerDeleteView(View):

    def post(self, request, *args, **kwargs):
        if not check_permission(request=request, permission='remove_customer'):
           return HttpResponse(status=401)
        user = request.user
        business = Business.objects.filter(owner=user).first()
        print(request)
        data = json.loads(request.body.decode())

        ids = [cust.get('id') for cust in data]
        try:
            deleted = Customer.objects.bulk_delete(ids=ids, business=business)
            return JsonResponse(status=200, data={'deleted':deleted})
        except Exception as e:
            print(e)
            return HttpResponse(status=400)

# class CustomerView(View):
#
#     def get(self, request, *args, **kwargs):
#
#         user = request.user
#         id = kwargs.get('id')
#         business = Business.objects.filter(owner=user).first()
#
#         if id:
#
#                 # customer = Customer.objects.filter(id=id).filter(business=business).first()
#                 customer = Customer.objects.get_one_by_business_and_id(business, id)
#                 if customer:
#                     if request.is_ajax():
#                         serialized_obj = serializers.serialize('json', [ customer, ])
#                         struct = json.loads(serialized_obj)
#                         serialized_obj = json.dumps(struct[0])
#                         company = ""
#                         if customer.company != None:
#                             company = customer.company.text
#
#                         return JsonResponse(status=200, data={'customer':serialized_obj,'company':company})
#                     else:
#
#                         return render_to_response("base/customer/customer.html", RequestContext(request,{'customer':customer}))
#                 else:
#                     if request.is_ajax():
#                         return JsonResponse(status=404,data={})
#                     return HttpResponse(status=404)
#
#         else:
#
#             # messages.success(request, 'Se ha creado satisfactoriamnte el cliente especificado')
#             # messages.error(request, 'Se ha creado satisfactoriamnte el cliente especificado')
#             # messages.info(request, 'Se ha creado satisfactoriamnte el cliente especificado')
#             # messages.warning(request, 'Se ha creado satisfactoriamnte el cliente especificado')
#             #
#             customers = Customer.objects.list_by_business(business)
#             if request.is_ajax():
#                 if 'q' in request.GET:
#                     return render_to_response('base/customer/customers_print_view.html', RequestContext(request,{'customers':customers}),status=200)
#                     # return JsonResponse(status=200, data={'customers':customers})
#                 else:
#                     return render_to_response("base/customer/table.html",RequestContext(request, {'customers':customers}))
#
#
#             return render_to_response("base/customer/customers.html", RequestContext(request, {'customers':customers, 'model':"Clientes", 'description':"Listado de clientes"}))

class CustomeRegisterView(View):

    def get(self, request, *args, **kwargs):
        if not check_permission(request=request, permission='add_customer'):
           return HttpResponseRedirect(redirect_to=reverse('login'))
        form = CustomerForm()
        return render_to_response("base/customer/form.html", RequestContext(request, {'form':form}))

    def post(self, request, *args, **kwargs):
        if not check_permission(request=request, permission='add_customer'):
           return HttpResponseRedirect(redirect_to=reverse('login'))
        form = CustomerForm(request.POST)
        errors = {}
        if form.is_valid():
            user = request.user
            business = Business.objects.filter(owner=user).first()
            response = Customer.objects.create_or_update_customer(form.cleaned_data, business)
            if response in Customer.objects.ERRORS:

                if response == Customer.objects.EMAIL_ERROR:
                    errors['unique_email'] = "Correo Repetido"

                return render_to_response("base/customer/form.html", RequestContext(request, {'form':form, 'errors':errors}),status=400)

            # messages.success(request, 'Se ha creado satisfactoriamnte el cliente especificado')
            return JsonResponse(data={'id':response.id},status=200)
        else:
            print("error")
            return render_to_response("base/customer/form.html", RequestContext(request, {'form':form,'errors':errors}),status=400)

class CustomerRemoveView(View):

    def post(self, request, *args, **kwargs):
        if not check_permission(request=request, permission='remove_customer'):
           return HttpResponseRedirect(redirect_to=reverse('login'))
        id = kwargs.get('id')
        user = request.user
        business = Business.objects.filter(owner=user).first()

        Customer.objects.delete_by_business(id=id, business=business)
        # messages.success(request, 'Se ha eliminado satisfactoriamnte el cliente ')
        return HttpResponse(status=200)
        # return HttpResponseRedirect(redirect_to=reverse('customers'))

class CustomerEditView(View):

    def set_data_from_customer(self, customer):
        company = None
        if customer.company:
            company = customer.company.text
        return {'first_name':customer.first_name, 'last_name':customer.last_name,
                'email':customer.email, 'comments':customer.comments, 'company':company,
                'birthday':customer.birthday, 'cellphone':customer.cellphone,
                'phone_home':customer.phone_home, 'address':customer.address}

    def get(self, request, *args, **kwargs):
        if not check_permission(request=request, permission='edit_customer'):
           return HttpResponseRedirect(redirect_to=reverse('login'))
        id = kwargs.get('id')
        user = request.user
        business = Business.objects.filter(owner=user).first()

        customer = Customer.objects.get_one_by_business_and_id(business=business, id=id)

        if customer:
            form = CustomerForm(instance=customer, initial=self.set_data_from_customer(customer))
            return render_to_response("base/customer/form.html", RequestContext(request,{'form':form}))
        else:
            return HttpResponse(status=404)

    def post(self, request, *args, **kwargs):
        if not check_permission(request=request, permission='edit_customer'):
           return HttpResponseRedirect(redirect_to=reverse('login'))
        id = kwargs.get('id')

        user = request.user
        business = Business.objects.filter(owner=user).first()

        customer = Customer.objects.get_one_by_business_and_id(business=business, id=id)

        if customer:
            form = CustomerForm(request.POST)
            errors = {}
            if form.is_valid():
                response = Customer.objects.create_or_update_customer(form.cleaned_data,business, customer)
                if response in Customer.objects.ERRORS:
                    if response == Customer.objects.EMAIL_ERROR:
                        errors['unique_email'] = "Correo Repetido"
                    return render_to_response("base/customer/form.html", RequestContext(request,{'form':form,'errors':errors}))

                #messages.success(request, 'Se ha creado satisfactoriamnte el cliente especificado')
                return HttpResponseRedirect(redirect_to=reverse('customers'))
            else:
                return render_to_response("base/customer/form.html", RequestContext(request,{'form':form,'errors':errors}))
        else:
            return HttpResponse(status=404)

class CustomerSelectView(View):

    def get(self, request, *args, **kwargs):
        user = request.user

        id = request.GET.get('id')
        if id:

            customer = Customer.objects.get(pk=id)
        else:
            customer = None
        business = Business.objects.filter(owner=user).first()
        # customers = Customer.objects.list_by_business(business)

        form = EventForm(initial={'customer':customer.id,'business':business})
        return render_to_response('base/customer/select.html', RequestContext(request, {'form':form}))


class ExportView(View):

   def get(self, request):
       user = request.user
       business = Business.objects.filter(owner=user).first()

       query = Customer.objects.list_by_business(business)
       columns = ['first_name','last_name','email','birthday','cellphone','phone_home']
       # return django_excel.make_response_from_query_sets(query, columns, 'xls',file_name='customer')
       data = Customer.objects.export_to_excel(business=business)
       return django_excel.make_response_from_records(data,'xls',file_name='customer')

class ImportView(View):

   def get(self, request):
       form = CustomerImportForm()
       return render_to_response('base/customer/import.html', RequestContext(request, {'form':form}))

   def post(self, request):
       user = request.user
       business = Business.objects.filter(owner=user).first()

       form = CustomerImportForm(request.POST, request.FILES)

       if form.is_valid():
           # print(request.FILES['excel'])
           print(request.FILES)
           data = request.FILES['excel']
           params = data.get_params()
           if params.get('file_type') not in ['xls']:
               return HttpResponse(status=400, content='Tipo de archivo incorrecto')

           result = pyexcel.get_sheet(file_type=params.get('file_type'), file_content=params.get('file_content'),colnames=['Apellidos','Compania','Correo',
                                                                                                                          'Fecha de Nacimiento',
                                                                                                          'Nombre','Telefono','Telefono Casa'])

           # print(result.to_array())
           # print(result.to_dict())
           records = result.to_records()

           result = Customer.objects.import_from_excel(records=records, business=business)

           if result in Customer.objects.ERRORS:
               return HttpResponse(status=400, content="Problema en los datos suministrados. Verfique que existan clientes con "
                                                       "correo repetido")

           return HttpResponse(content="Se importaron los clientes.")#
       return HttpResponse(status=400, content="Intente  nuevamente, ha ocurrido un error")


class TestRest(View):

    def get(self, request, *args, **kwargs):
        lista = [{'asignatura':'Facho','nota':5},{'asignatura':'Inflar','nota':5},{'asignatura':'Puntualidad','nota':3}]
        return JsonResponse(data=lista, safe=False)

    def post(self, request, *args, **kwargs):
        data = (json.loads(request.body.decode()))
        form = TestForm(data)
        if form.is_valid():
            print(form.cleaned_data)
        else:
            print(form)
            print(form.errors)
            print(form.errors.as_json())
            print('meti la pata')
        # print(request.POST)
        # print(*args)
        # print(**kwargs)
        return HttpResponse()


