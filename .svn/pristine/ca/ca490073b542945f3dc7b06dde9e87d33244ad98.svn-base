import json
from django.core.urlresolvers import reverse
from django.http.response import JsonResponse, HttpResponseRedirect, HttpResponse
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from django.views.generic.base import View
from base.models import Business
from base.prodserv_forms import PositionForm
from base.prodserv_models import Product, ProductPrice, Service, Position

__author__ = 'maykel'


class ProductList(View):
    def get(self, request, *args, **kwargs):
        products = Product.objects.filter(business=Business.objects.get_business_by_user(self.request.user))
        data = []
        items = []
        for product in products:
            product_data = {'id': product.id,
                       'category':
                           {'description': product.category.description,
                            'id': product.category.id},
                                    'name': product.name,
                                    'description': product.description,
                                    'recipe': {'name': product.recipe.name,
                                               'id': product.recipe.name}
                       }

            # data.append({'category': product.category.description, 'product': product.name, 'description': product.description, 'recipe': product.recipe.name})
            range = ProductPrice.objects.filter(product=product)
            for item in range:
                items.append({'min': item.min, 'max': item.max, 'price': item.serializable_value('price')})
            product_data['items']= items
            data.append(product_data)
        return JsonResponse((data), safe=False, status=200)

class ServicesList(View):
    def get(self, request, *args, **kwargs):
        w = Service.objects.filter(business=Business.objects.get_business_by_user(self.request.user))
        data = []
        if w:
            for item in w:
                data.append({'id':item.id, 'name': item.name, 'description': item.description, 'tarifa': item.serializable_value('tarifa_horaria') })
        return JsonResponse(list(data), safe=False, status=200)
class PositionList(View):
    def get(self, request, *args, **kwargs):
        categ = Position.objects.filter(business=Business.objects.get_business_by_user(self.request.user))
        data=[]
        if categ:
            for item in categ:
                data.append({'id':item.id, 'description': item.description})
        return JsonResponse(data, safe=False, status=200)

class PositionAdd(View):
    form_class = PositionForm
    def post(self, request, *args, **kwargs):
        # data = {'description': 'Mesero'}/
        data = (json.loads(request.body.decode()))
        form = self.form_class(data)
        if form.is_valid():
            p = Position()
            p.description = data.get('description')
            p.business = Business.objects.get_business_by_user(self.request.user)
            try:
                p.save()
                return HttpResponse(status=200)
            except:
                return HttpResponse(status=500)
        else:
            return JsonResponse(form.errors, safe=False, status=200)

class PositionEdit(View):
    def get(self, request, *args, **kwargs):
        id = self.kwargs.get('id')
        if id:
            p = Position.objects.filter(id=id).first()
            if p:
                data = {'description': p.description}
                return JsonResponse(data, safe=False, status=200)
            else:
                return JsonResponse({'errors': 'Page not Found'}, safe=False, status=404)
        else:
            return JsonResponse({'errors': 'Page not Found'}, safe=False, status=404)
    def post(self, request, *args, **kwargs):
        data = (json.loads(request.body.decode()))
        id = self.kwargs.get('id')

        if id:
            Position.objects.filter(id=id).first().delete()
            p = Position()
            p.description = data.get('description')
            p.business = Business.objects.get_business_by_user(self.request.user)
            try:
                p.save()
                return HttpResponse(status=201)
            except:
                return JsonResponse({'errors': 'Database error'}, safe=False, status=500)
        else:
            return JsonResponse({'errors': 'Page not Found'}, safe=False, status=404)

class PositionRemove(View):
    def post(self, request, *args, **kwargs):
        # if not check_permission(request=request, permission='remove_customer'):
        #    return HttpResponse(status=401)
        user = request.user
        business = Business.objects.filter(owner=user).first()
        data = json.loads(request.body.decode())
        ids = [position.get('id') for position in data]
        try:
            deleted = Position.objects.bulk_delete(ids=ids, business=business)
            return JsonResponse(status=200, data={'deleted': deleted})
        except Exception as e:
            return HttpResponse(status=400)
